services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  redis:
    image: redis:8
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    restart: always
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"
    networks:
      - app-network

  migrate:
    image: ninepiece2/lol-bootcamp-tracker:migrate
    container_name: lol-bootcamp-migrate
    depends_on:
      - postgres
    environment:
      DATABASE_URL: ${DATABASE_URL}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
      NODE_ENV: production
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo "Waiting for database to be ready..." && \
      until pg_isready -h postgres -p 5432 -U ${POSTGRES_USER}; do sleep 2; done && \
      echo "Running migrations..." && \
      ./migrate.sh && \
      echo "Migration complete."
    restart: "no"
    networks:
      - app-network

  app:
    image: ninepiece2/lol-bootcamp-tracker:latest
    container_name: lol-bootcamp-ui
    restart: always
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_SECRET: ${AUTH_SECRET}
      RIOT_API_KEY: ${RIOT_API_KEY}
      TWITCH_CLIENT_ID: ${TWITCH_CLIENT_ID}
      TWITCH_CLIENT_SECRET: ${TWITCH_CLIENT_SECRET}
      TWITCH_EVENTSUB_SECRET: ${TWITCH_EVENTSUB_SECRET}
      TWITCH_CALLBACK_URL: ${TWITCH_CALLBACK_URL}
    ports:
      - "3000:3000"
    networks:
      - app-network

  worker:
    image: ninepiece2/lol-bootcamp-tracker:latest
    container_name: lol-bootcamp-worker
    command: ["tsx", "workers.ts"]
    restart: always
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      RIOT_API_KEY: ${RIOT_API_KEY}
      TWITCH_CLIENT_ID: ${TWITCH_CLIENT_ID}
      TWITCH_CLIENT_SECRET: ${TWITCH_CLIENT_SECRET}
      TWITCH_EVENTSUB_SECRET: ${TWITCH_EVENTSUB_SECRET}
      TWITCH_CALLBACK_URL: ${TWITCH_CALLBACK_URL}
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/ssl/certs:ro
    networks:
      - app-network

volumes:
  pgdata:
  redisdata:

networks:
  app-network:
    driver: bridge