generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  password    String
  name        String?
  isAdmin     Boolean      @default(false) @map("is_admin")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  username    String       @unique
  accounts    Account[]
  bootcampers Bootcamper[]
  sessions    Session[]
  userLayout  UserLayout?

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Bootcamper {
  id                String           @id @default(uuid())
  riotId            String?          @map("riot_id")
  summonerName      String           @map("summoner_name")
  summonerId        String?          @map("summoner_id")
  puuid             String
  region            String
  twitchLogin       String?          @map("twitch_login")
  twitchUserId      String?          @map("twitch_user_id")
  role              BootcamperRole?
  startDate         DateTime         @map("start_date") @db.Date
  plannedEndDate    DateTime         @map("planned_end_date") @db.Date
  actualEndDate     DateTime?        @map("actual_end_date") @db.Date
  status            BootcamperStatus @default(idle)
  lastGameId        String?          @map("last_game_id")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  name              String?
  isDefault         Boolean          @default(false) @map("is_default")
  userId            String?          @map("user_id")
  peakSoloTier      String?          @map("peak_solo_tier")
  peakSoloRank      String?          @map("peak_solo_rank")
  peakSoloLP        Int?             @map("peak_solo_lp")
  peakFlexTier      String?          @map("peak_flex_tier")
  peakFlexRank      String?          @map("peak_flex_rank")
  peakFlexLP        Int?             @map("peak_flex_lp")
  peakUpdatedAt     DateTime?        @map("peak_updated_at")
  currentSoloTier   String?          @map("current_solo_tier")
  currentSoloRank   String?          @map("current_solo_rank")
  currentSoloLP     Int?             @map("current_solo_lp")
  currentSoloWins   Int?             @map("current_solo_wins")
  currentSoloLosses Int?             @map("current_solo_losses")
  currentFlexTier   String?          @map("current_flex_tier")
  currentFlexRank   String?          @map("current_flex_rank")
  currentFlexLP     Int?             @map("current_flex_lp")
  currentFlexWins   Int?             @map("current_flex_wins")
  currentFlexLosses Int?             @map("current_flex_losses")
  rankUpdatedAt     DateTime?        @map("rank_updated_at")
  user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  games             Game[]
  teamMembers       TeamMember[]
  twitchStreams     TwitchStream[]

  @@unique([puuid, userId])
  @@map("bootcampers")
}

model Game {
  id           String     @id @default(uuid())
  riotGameId   String     @map("riot_game_id")
  bootcamperId String     @map("bootcamper_id")
  startedAt    DateTime   @map("started_at")
  endedAt      DateTime?  @map("ended_at")
  status       GameStatus
  matchData    Json?      @map("match_data")
  bootcamper   Bootcamper @relation(fields: [bootcamperId], references: [id], onDelete: Cascade)

  @@unique([riotGameId, bootcamperId])
  @@map("games")
}

model TwitchStream {
  id           String     @id @default(uuid())
  bootcamperId String     @map("bootcamper_id")
  twitchUserId String     @map("twitch_user_id")
  streamUrl    String     @map("stream_url")
  live         Boolean    @default(false)
  title        String?
  startedAt    DateTime?  @map("started_at")
  endedAt      DateTime?  @map("ended_at")
  lastChecked  DateTime   @default(now()) @map("last_checked")
  bootcamper   Bootcamper @relation(fields: [bootcamperId], references: [id], onDelete: Cascade)

  @@map("twitch_streams")
}

model Team {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now()) @map("created_at")
  members   TeamMember[]

  @@map("teams")
}

model TeamMember {
  teamId       String     @map("team_id")
  bootcamperId String     @map("bootcamper_id")
  bootcamper   Bootcamper @relation(fields: [bootcamperId], references: [id], onDelete: Cascade)
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([teamId, bootcamperId])
  @@map("team_members")
}

enum BootcamperRole {
  pro
  streamer
  rookie
}

enum BootcamperStatus {
  idle
  in_game
}

enum GameStatus {
  live
  completed
}

model UserLayout {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  layout    Json
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_layouts")
}
