// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BootcamperRole {
  pro
  streamer
  rookie
}

enum BootcamperStatus {
  idle
  in_game
}

enum GameStatus {
  live
  completed
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  password      String    // Hashed password
  name          String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  bootcampers   Bootcamper[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Bootcamper {
  id              String            @id @default(uuid())
  name            String?           // Display name for the bootcamper (e.g., "Doublelift", "Sneaky")
  riotId          String?           @map("riot_id") // Full Riot ID (GameName#TAG)
  summonerName    String            @map("summoner_name")
  summonerId      String?           @map("summoner_id") // Optional, may not be available from Account API
  puuid           String
  region          String
  twitchLogin     String?           @map("twitch_login")
  twitchUserId    String?           @map("twitch_user_id")
  role            BootcamperRole?
  startDate       DateTime          @map("start_date") @db.Date
  plannedEndDate  DateTime          @map("planned_end_date") @db.Date
  actualEndDate   DateTime?         @map("actual_end_date") @db.Date
  status          BootcamperStatus  @default(idle)
  lastGameId      String?           @map("last_game_id")
  userId          String?           @map("user_id") // If null, it's an admin/default bootcamper
  isDefault       Boolean           @default(false) @map("is_default") // Admin-created default bootcampers
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  
  user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  games           Game[]
  twitchStreams   TwitchStream[]
  teamMembers     TeamMember[]

  @@unique([puuid, userId]) // Each user can have their own bootcamper for same PUUID
  @@map("bootcampers")
}

model Game {
  id            String      @id @default(uuid())
  riotGameId    String      @map("riot_game_id")
  bootcamperId  String      @map("bootcamper_id")
  startedAt     DateTime    @map("started_at")
  endedAt       DateTime?   @map("ended_at")
  status        GameStatus
  matchData     Json?       @map("match_data")
  
  bootcamper    Bootcamper  @relation(fields: [bootcamperId], references: [id], onDelete: Cascade)
  
  @@unique([riotGameId, bootcamperId])
  @@map("games")
}

model TwitchStream {
  id            String      @id @default(uuid())
  bootcamperId  String      @map("bootcamper_id")
  twitchUserId  String      @map("twitch_user_id")
  streamUrl     String      @map("stream_url")
  live          Boolean     @default(false)
  title         String?
  startedAt     DateTime?   @map("started_at")
  endedAt       DateTime?   @map("ended_at")
  lastChecked   DateTime    @default(now()) @map("last_checked")
  
  bootcamper    Bootcamper  @relation(fields: [bootcamperId], references: [id], onDelete: Cascade)
  
  @@map("twitch_streams")
}

model Team {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now()) @map("created_at")
  
  members     TeamMember[]
  
  @@map("teams")
}

model TeamMember {
  teamId        String      @map("team_id")
  bootcamperId  String      @map("bootcamper_id")
  
  team          Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  bootcamper    Bootcamper  @relation(fields: [bootcamperId], references: [id], onDelete: Cascade)
  
  @@id([teamId, bootcamperId])
  @@map("team_members")
}
