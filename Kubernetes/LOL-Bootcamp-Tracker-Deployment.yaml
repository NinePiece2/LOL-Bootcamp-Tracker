apiVersion: v1
kind: Secret
metadata:
  name: ssl-cert
  namespace: lol-bootcamp-tracker
type: Opaque
data:
  server.cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEK1RDQ0F1R2dBd0lCQWdJVVRVeGZDbVNHbWFKcGI1U3BwNG9Jb1MrU0NqSXdEUVlKS29aSWh2Y05BUUVMDQpCUUF3Z1lzeEN6QUpCZ05WQkFZVEFrTkJNUkF3RGdZRFZRUUlEQWRQYm5SaGNtbHZNUkV3RHdZRFZRUUhEQWhDDQpjbUZ0Y0hSdmJqRU9NQXdHQTFVRUNnd0ZVbTl0YVhReEN6QUpCZ05WQkFzTUFrbFVNUll3RkFZRFZRUUREQTF5DQpiMjFwZEhOaFozVXVZMjl0TVNJd0lBWUpLb1pJaHZjTkFRa0JGaE55YjIxcGRFQnliMjFwZEhOaFozVXVZMjl0DQpNQjRYRFRJME1ESXhPREEzTVRFME1Wb1hEVEkwTURNeE9UQTNNVEUwTVZvd2dZc3hDekFKQmdOVkJBWVRBa05CDQpNUkF3RGdZRFZRUUlEQWRQYm5SaGNtbHZNUkV3RHdZRFZRUUhEQWhDY21GdGNIUnZiakVPTUF3R0ExVUVDZ3dGDQpVbTl0YVhReEN6QUpCZ05WQkFzTUFrbFVNUll3RkFZRFZRUUREQTF5YjIxcGRITmhaM1V1WTI5dE1TSXdJQVlKDQpLb1pJaHZjTkFRa0JGaE55YjIxcGRFQnliMjFwZEhOaFozVXVZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGDQpBQU9DQVE4QU1JSUJDZ0tDQVFFQTBhYXhMb2JpL25jbmNidHhaaTk4dzkxdTIvcWxscWpyME84VmlxK3NBWEdnDQovNzJUNXhRaUF1dVpyamk2YU43R1JvMXVtNHRCdHhqUnhIM1JiY29CY3BNT2lBUUYrbE1hM1EwT2pyNVRjWXR6DQpNMVJpK2tNMHBzNTRCZ2YxVG1scktHSjNOK1VCcnpVYml1ajhZMm1hWkNGcUhqU2R3N3JkQnFPNW9vdGZvRng1DQpEcW81aWtERW1wYVBaSXVpK253VnBGd0xHb0VlMmR5SmJUclZnMGdvWGcvUUVNaU9kR0tDOUFNWUQrMG5maHMzDQpvTWhsMm16VUF6Z1JwSHA4WmIyNVhGOEVjZGcwS0hCYmt6NzRkYVVZZHdOU0NOdVRKeEZUR0FIRWVBblRWdGJ2DQpVNENDUTBmZzIzcnlkRnZ4MFZsSVI0SW5VNGZjNnNacHRaSTB1ZzlQSlFJREFRQUJvMU13VVRBZEJnTlZIUTRFDQpGZ1FVZU11ZUxNMVp4LzJWdHkvWUt4TXlUVG5EZ0JFd0h3WURWUjBqQkJnd0ZvQVVlTXVlTE0xWngvMlZ0eS9ZDQpLeE15VFRuRGdCRXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFHMHI3DQpacnVZRENVYUErcllkUFFIV2t3Rk81NmNOdEhoVitxV3VYTlQwNGhMdTFKcWdWeEowL0VaSENYcDFYRHpvbThjDQpjcWJVMVNCZStEMVNWSStqV1RiSHRvcjIvV3c1TTQxbEx4bHRSQWFyYncwNmlNTlpwRllTeG04MkVrQWVldkEwDQpSUWh0Y0lPQW9SN2ZySnorVTNpRExMaHRtUVA3a29qSmtnVEFBL1d6U3hnUWNadllYUm5MTWE4dVRqLzlRZTViDQpzTGxvUFl0MTlabjQ2UEFqV3puMWkvb0FWbDNObUNZWklPejRVRitHT0ozcmZDS2hNNEJBbERsNDVsVCs3VEVnDQpHT3dYb2ZmMWJqUXh0S1dUVVZwUTdvMFVadCtpY2pvRGxmdXM3TERiOEg1S2c0VUpETTFGSjl6amppVVI1OHZxDQp5RDN3ZHNQYmUyWS85K1lYUUE9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0K
  server.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tDQpNSUlFdmdJQkFEQU5CZ2txaGtpRzl3MEJBUUVGQUFTQ0JLZ3dnZ1NrQWdFQUFvSUJBUURScHJFdWh1TCtkeWR4DQp1M0ZtTDN6RDNXN2IrcVdXcU92UTd4V0tyNndCY2FEL3ZaUG5GQ0lDNjVtdU9McG8zc1pHalc2YmkwRzNHTkhFDQpmZEZ0eWdGeWt3NklCQVg2VXhyZERRNk92bE54aTNNelZHTDZRelNtem5nR0IvVk9hV3NvWW5jMzVRR3ZOUnVLDQo2UHhqYVpwa0lXb2VOSjNEdXQwR283bWlpMStnWEhrT3FqbUtRTVNhbG85a2k2TDZmQldrWEFzYWdSN1ozSWx0DQpPdFdEU0NoZUQ5QVF5STUwWW9MMEF4Z1A3U2QrR3plZ3lHWGFiTlFET0JHa2VueGx2YmxjWHdSeDJEUW9jRnVUDQpQdmgxcFJoM0ExSUkyNU1uRVZNWUFjUjRDZE5XMXU5VGdJSkRSK0RiZXZKMFcvSFJXVWhIZ2lkVGg5enF4bW0xDQpralM2RDA4bEFnTUJBQUVDZ2dFQUNiN1MvQ1p3TFU0bEl0UGVMQ3hDR0xSZ1I1dFJzTEhyK2s1RUpQK2xyTkNCDQp5eVF6dzBRQk83dXZiUW85TWd4RVVROFlmZVJUTUVZWC90SUVGdk45cmViWTZxallqVXBwS2RtR1J5RGc3ZkF0DQpScUlpS0FvbWk2Z2hLMU5FaTNuNkxaK215bzN3NDRVc3Rxcm90b2ROWjdaU1FaS3hFR0kzNHRhS3F4d0puSUdIDQp1SE9PdHBxUG9sVG5hNmRvTngrNGRTRkZid2Fub2R2MHJuZDFVbWJ3ajUvcnNocGpqNmZVTTRnOEl6ckY2QVV4DQpmRFVaalNROUx1Z2gwNFZDenlqNXNxMjRQVDY2RG03Z2dKUzBBSFk3aXYxMUhnMy8vZ3VZczFSNisvQ21vYkxkDQpqUHFCM2xiYytiMTUvZkowYmlQMVZCaStOZDVVSXduZGlZeDZEREpLNlFLQmdRRHEyb1ZhSVp2UFZNOHZ6K3pGDQppREJBSEZpUU11cXArY1VtSmVOZXo3UTczWGd1Q0dnS09MUDQ3aU1VeXg3cGRTUWd0b1QyeXNnY1ZMbE1kMlRpDQpLc2hNeWhGZ0pGRGl4RWZUV3FsREhJYjNlQkc5dGFCWDFzVXZPNzNYd2RJQnN2UllyTDhXS0dJWmFPdjFhbEdyDQpKL3FDSEMrRGFDZDVSY3BEWEt4djNoK0ZIUUtCZ1FEa2h6NVQ4VFFFd0MxSXpYMlFXYmNFdjk2Ujk3L3A0aUxCDQp3bXlxTU1XeUVOdVd2Z1dGMk5jTVUvbW9HSVZLUmE5TndVd1BmUFhObjM4dGhMbEFGVmdNaDVpU1B1Vkthc1I5DQpNOFZKQS9qdjB5UXZzNDc3Rkp6RytaV3UrMndJVVA1Z0lJSDU0Y041WHp3bHNsbFk5MEFUbTdDczlTZjE1UEt3DQpqNTJ1Y3lIN3FRS0JnUUNTWkFIcGk3ZUdoalBiZHJ6ODZBWkRnQ2ZJUXFTNXJRSXg1RDRWTkYwQlQreUFyU2JFDQo4RkZtb25IbG5UTTRqSmNuZVAzcW83NFd3c3o2R0JZZlVGR29ZL0J1d0ZSVzljaGJ1MUIwajh5bFp3ZVAvQzNsDQpjdTlZb09HV0lxK1g5WWVQMnFZRjFzaEhWSHA0Y0h4VnRzYlU0V0xRZzFUUHFDd0t6ektCVExEVEZRS0JnQVduDQo2eno4blVMNDFxWVVuK1R3czN6a21zZVdFQ1BqdXVSOHdWKzg4VWVrN3lwZDdaa1FjdElWU2ZxRkVOZHp2aEQ0DQpsYjlVWW1rQ1o0MWkyWXJpZkZsakNiMmszTnZvcEpCTXRiZEc1K1JYbjIrbXpBVWV6M3FGTnRVcjE5S2szb2JXDQpoeUQrRzI1bmt2K0QySDVCTUU3TDdhVjZNOUQ4SjUyREVHMyszM3B4QW9HQkFLYU5HN3p5N2Q3ekZzdmcwK1plDQpNQWF5NHlNMk9YVlpVcHpZeHE2Rk9tYXdhMkJvMitYSVlIZFJRek9mbXJlNGV1azFOdWRyU2xHU0VrYmZZVXVyDQpHN1d1VGZhSklUUW9pbXJHbW9RMmNsbUcvS1BDa09yby9IbWpUMFovYTBNcXVXUkFad1VXcDg5dTROaXBrWms1DQpTdW1zSFBJVUFCN2NOMUV4WTVrQkhsZ1gNCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0NCg==

# Database and Redis Deployment
---

apiVersion: v1
kind: Secret
metadata:
  name: app-secret-pg
  namespace: lol-bootcamp-tracker
type: kubernetes.io/basic-auth
data:
  username: YXBw
  password: cGFzc3dvcmQ=

---

apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres
  namespace: lol-bootcamp-tracker
spec:
  instances: 3
  primaryUpdateStrategy: unsupervised
  bootstrap:
    initdb:
      database: app
      owner: app
      secret:
        name: app-secret-pg
  storage:
    size: 1Gi
    storageClass: microk8s-hostpath

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: lol-bootcamp-tracker
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    postgresql.k8s.enterprisedb.io/cluster: postgres

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: lol-bootcamp-tracker
spec:
  clusterIP: None
  ports:
    - port: 6379
      name: redis
  selector:
    app: redis

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: lol-bootcamp-tracker
spec:
  serviceName: "redis"
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:8.2
        command:
          - sh
          - -c
          - |
            if [ "$HOSTNAME" = "redis-0" ]; then
              echo "Starting as Redis master"
              redis-server /etc/redis/redis.conf
            else
              echo "Starting as Redis replica of redis-0"
              redis-server /etc/redis/redis.conf --replicaof redis-0.redis.lol-bootcamp-tracker.svc.cluster.local 6379
            fi
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /etc/redis
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: microk8s-hostpath
      resources:
        requests:
          storage: 500Mi

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-sentinel
  namespace: lol-bootcamp-tracker
spec:
  serviceName: "redis-sentinel"
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
    spec:
      containers:
      - name: sentinel
        image: redis:8.2
        command:
          - sh
          - -c
          - |
            # Wait for Redis master to be ready
            until redis-cli -h redis-0.redis.lol-bootcamp-tracker.svc.cluster.local -p 6379 ping; do
              echo "Waiting for Redis master..."
              sleep 2
            done
            echo "Redis master is ready, starting Sentinel..."
            # Copy config to writable location
            cp /etc/redis/sentinel.conf /tmp/sentinel.conf
            redis-sentinel /tmp/sentinel.conf
        ports:
        - containerPort: 26379
          name: sentinel
        resources:
          requests:
            cpu: "25m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
        volumeMounts:
        - name: config
          mountPath: /etc/redis
        livenessProbe:
          tcpSocket:
            port: 26379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - sentinel
            - masters
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: redis-sentinel-config

---

apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: lol-bootcamp-tracker
spec:
  clusterIP: None
  ports:
    - port: 26379
      name: sentinel
  selector:
    app: redis-sentinel

---

apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel-service
  namespace: lol-bootcamp-tracker
spec:
  ports:
    - port: 26379
      name: sentinel
      targetPort: 26379
  selector:
    app: redis-sentinel

# App Deployment
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: lol-bootcamp-tracker-sa
  namespace: lol-bootcamp-tracker

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: lol-bootcamp-tracker
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: lol-bootcamp-tracker
subjects:
- kind: ServiceAccount
  name: lol-bootcamp-tracker-sa
  namespace: lol-bootcamp-tracker
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: lol-bootcamp-tracker-ui
  name: lol-bootcamp-tracker-ui
  namespace: lol-bootcamp-tracker
spec:
  revisionHistoryLimit: 3
  replicas: 3
  selector:
    matchLabels:
      run: lol-bootcamp-tracker-ui
  template:
    metadata:
      labels:
        run: lol-bootcamp-tracker-ui
    spec:
      volumes:
        - name: ssl-cert-volume
          secret:
            secretName: ssl-cert
        - name: nginx-config-volume
          configMap:
            name: nginx-config
      containers:
        - name: lol-bootcamp-tracker-ui
          image: ninepiece2/lol-bootcamp-tracker:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          env:
            - name: NODE_ENV
              value: "production"
            - name: AUTH_TRUST_HOST
              value: "true"
            - name: AUTH_SECRET
              value: ""
            - name: NEXTAUTH_SECRET
              value: "="
            - name: NEXTAUTH_URL
              value: "https://lol-bootcamp-tracker.romitsagu.com"
            - name: DATABASE_URL
              value: "postgres://app:password@postgres-rw:5432/app"
            - name: REDIS_SENTINEL_MASTER
              value: "mymaster"
            - name: REDIS_SENTINEL_HOSTS
              value: "redis-sentinel-0.redis-sentinel.lol-bootcamp-tracker.svc.cluster.local:26379,redis-sentinel-1.redis-sentinel.lol-bootcamp-tracker.svc.cluster.local:26379,redis-sentinel-2.redis-sentinel.lol-bootcamp-tracker.svc.cluster.local:26379"
            - name: RIOT_API_KEY
              value: ""
            - name: TWITCH_CLIENT_ID
              value: ""
            - name: TWITCH_CLIENT_SECRET
              value: ""
            - name: TWITCH_EVENTSUB_SECRET
              value: ""
            - name: TWITCH_CALLBACK_URL
              value: "https://lol-bootcamp-tracker.romitsagu.com/api/webhooks/twitch"
            - name: NEXT_PUBLIC_APP_URL
              value: "https://lol-bootcamp-tracker.romitsagu.com"


        - name: lol-bootcamp-tracker-nginx
          image: nginx:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: ssl-cert-volume
              mountPath: "/etc/ssl/certs"
              readOnly: true
            - name: nginx-config-volume
              mountPath: "/etc/nginx/nginx.conf"
              subPath: nginx.conf
          ports:
            - containerPort: 443
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "300m"
              memory: "256Mi"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: lol-bootcamp-tracker-worker
  name: lol-bootcamp-tracker-worker
  namespace: lol-bootcamp-tracker
spec:
  revisionHistoryLimit: 3
  replicas: 1
  selector:
    matchLabels:
      run: lol-bootcamp-tracker-worker
  template:
    metadata:
      labels:
        run: lol-bootcamp-tracker-worker
    spec:
      serviceAccountName: lol-bootcamp-tracker-sa
      initContainers:
      # Wait for PostgreSQL cluster to be ready
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
          - sh
          - -c
          - |
            echo "Waiting for PostgreSQL cluster to be ready..."
            # Wait for PostgreSQL service to accept connections
            until pg_isready -h postgres-rw -p 5432 -U app; do
              echo "PostgreSQL service not ready, waiting..."
              sleep 3
            done
            # Additional check: try to connect and verify cluster status
            until psql -h postgres-rw -U app -d app -c "SELECT version();" >/dev/null 2>&1; do
              echo "PostgreSQL not fully ready for queries, waiting..."
              sleep 3
            done
            echo "PostgreSQL cluster is ready and accepting connections!"
        env:
          - name: PGPASSWORD
            value: "password"
      # Database migration only runs once (check if schema exists)
      - name: db-migration-check
        image: ninepiece2/lol-bootcamp-tracker:migrate
        imagePullPolicy: Always
        command:
          - sh
          - -c
          - |
            # Only run migration if tables don't exist yet
            if ! psql "$DATABASE_URL" -c "SELECT 1 FROM information_schema.tables WHERE table_name = 'User' LIMIT 1;" >/dev/null 2>&1; then
              echo "Running database migration..."
              ./migrate.sh
            else
              echo "Database schema already exists, skipping migration."
            fi
        env:
          - name: DATABASE_URL
            value: "postgres://app:password@postgres-rw:5432/app"
          - name: DB_HOST
            value: "postgres-rw"
          - name: DB_PORT
            value: "5432"
          - name: NODE_ENV
            value: "production"
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
      containers:
        - name: lol-bootcamp-tracker-worker
          image: ninepiece2/lol-bootcamp-tracker:latest
          imagePullPolicy: Always
          command: ["tsx", "workers.ts"]
          resources:
            requests:
              cpu: "300m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          env:
            - name: NODE_ENV
              value: "production"
            - name: DATABASE_URL
              value: "postgres://app:password@postgres-rw:5432/app"
            - name: REDIS_SENTINEL_MASTER
              value: "mymaster"
            - name: REDIS_SENTINEL_HOSTS
              value: "redis-sentinel-0.redis-sentinel.lol-bootcamp-tracker.svc.cluster.local:26379,redis-sentinel-1.redis-sentinel.lol-bootcamp-tracker.svc.cluster.local:26379,redis-sentinel-2.redis-sentinel.lol-bootcamp-tracker.svc.cluster.local:26379"
            - name: RIOT_API_KEY
              value: ""
            - name: TWITCH_CLIENT_ID
              value: ""
            - name: TWITCH_CLIENT_SECRET
              value: ""
            - name: TWITCH_EVENTSUB_SECRET
              value: ""
            - name: TWITCH_CALLBACK_URL
              value: "https://lol-bootcamp-tracker.romitsagu.com/api/webhooks/twitch"
            - name: NEXTAUTH_SECRET
              value: ""

---

apiVersion: v1
kind: Service
metadata:
  name: lol-bootcamp-tracker-ui-service
  namespace: lol-bootcamp-tracker
spec:
  selector:
    run: lol-bootcamp-tracker-ui
  ports:
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443
      nodePort: 30007
  type: LoadBalancer

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: lol-bootcamp-tracker-ui-hpa
  namespace: lol-bootcamp-tracker
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: lol-bootcamp-tracker-ui
  minReplicas: 3
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70